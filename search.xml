<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/11/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<img src="https://cdn.jsdelivr.net/gh/senleima/imagebed/img/alipay.jpg" alt="alipay" style="zoom:25%;" />



<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server<img src="https://cdn.jsdelivr.net/gh/senleima/imagebed/img/wechatpay.jpg" alt="wechatpay" style="zoom: 25%;" /></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>自定义一个ArrayList</title>
    <url>/2021/11/07/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AAArrayList/</url>
    <content><![CDATA[
        <h1 id="自定义一个ArrayList"   >
          <a href="#自定义一个ArrayList" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义一个ArrayList" class="headerlink" title="自定义一个ArrayList"></a>自定义一个ArrayList</h1>
      
        <h2 id="ArrayList特点和底层实现"   >
          <a href="#ArrayList特点和底层实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#ArrayList特点和底层实现" class="headerlink" title="ArrayList特点和底层实现"></a>ArrayList特点和底层实现</h2>
      <p>ArrayList底层是用数组实现的存储。 特点：查询效率高，增删效率低，线程不安全。查看源码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/senleima/imagebed/img/202111071028176.png" alt="自定义一个ArrayList1"></p>
<p>可以看出ArrayList底层使用Object数组来存储元素数据。所有的方法，都围绕这个核心的Object数组来开展。</p>
<p>我们知道，数组长度是有限的，而ArrayList是可以存放任意数量的对象，长度不受限制，那么它是怎么实现的呢?本质上就是通过定义新的更大的数组，将旧数组中的内容拷贝到新数组，来实现扩容。 ArrayList的Object数组初始化长度为10，如果我们存储满了这个数组，需要存储第11个对象，就会定义新的长度更大的数组，并将原数组内容和新的元素一起加入到新数组中，源码如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/senleima/imagebed/img/202111071030809.png" alt="自定义一个ArrayList2"></p>

        <h2 id="自定义一个ArrayList，体会底层原理"   >
          <a href="#自定义一个ArrayList，体会底层原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义一个ArrayList，体会底层原理" class="headerlink" title="自定义一个ArrayList，体会底层原理"></a>自定义一个ArrayList，体会底层原理</h2>
      <p>代码如下：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">package com.msl.mycollection;</span><br><span class="line"></span><br><span class="line">import javax.management.RuntimeErrorException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 自定义实现一个ArrayList,体会底层原理</span><br><span class="line"> * @author Senley</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class MslArrayList&lt;E&gt; &#123;</span><br><span class="line">	</span><br><span class="line">	private Object[] elementData;</span><br><span class="line">	private int size;</span><br><span class="line">	private static final int DEFALT_CAPACITY = 10;</span><br><span class="line">	</span><br><span class="line">	public MslArrayList() &#123;</span><br><span class="line">		elementData = new Object[DEFALT_CAPACITY];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public MslArrayList(int capacity) &#123;</span><br><span class="line">		if(capacity&lt;0) &#123;</span><br><span class="line">			throw new RuntimeException(&quot;容器的容量不能为负数&quot;);</span><br><span class="line">		&#125;else if(capacity==0) &#123;</span><br><span class="line">			elementData = new Object[DEFALT_CAPACITY];</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			elementData = new Object[capacity];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public int size() &#123;</span><br><span class="line">		return size;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public boolean isEmpty() &#123;</span><br><span class="line">		return size==0?true:false;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void add(E element) &#123;</span><br><span class="line">		//什么时候扩容</span><br><span class="line">		if(size == elementData.length) &#123;</span><br><span class="line">			//扩容操作</span><br><span class="line">			Object[] newArray = new Object[elementData.length + (elementData.length&gt;&gt;1)];//10--&gt;10+10/2</span><br><span class="line">			System.arraycopy(elementData, 0, newArray, 0, elementData.length);</span><br><span class="line">			elementData = newArray;		</span><br><span class="line">		&#125;</span><br><span class="line">		elementData[size++] = element;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public E get(int index) &#123;</span><br><span class="line">		checkRange(index);</span><br><span class="line">		return (E) elementData[index];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void set(E element,int index) &#123;</span><br><span class="line">		checkRange(index);</span><br><span class="line">		elementData[index] = element;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void checkRange(int index) &#123;</span><br><span class="line">		//索引合法判断[0,size)</span><br><span class="line">		if(index&lt;0 || index&gt;size-1) &#123;</span><br><span class="line">			//不合法</span><br><span class="line">			throw new RuntimeException(&quot;索引不合法:&quot;+index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void remove(E element) &#123;</span><br><span class="line">		//将element和所有元素挨个比较,获得第一个比较为true的,返回.</span><br><span class="line">		for(int i=0;i&lt;size;i++) &#123;</span><br><span class="line">			if(element.equals(get(i))) &#123;//容器中所有的比较操作都是用的equals而不是==</span><br><span class="line">				//将该元素从此处移除</span><br><span class="line">				remove(i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void remove(int index) &#123;</span><br><span class="line">		int numMoved = elementData.length-index-1;</span><br><span class="line">		if(numMoved&gt;0) &#123;</span><br><span class="line">			System.arraycopy(elementData, index+1, elementData, index, elementData.length-index-1);</span><br><span class="line">		&#125;</span><br><span class="line">		elementData[--size] = null;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@Override</span><br><span class="line">	public String toString() &#123;</span><br><span class="line">		StringBuilder sb = new StringBuilder();</span><br><span class="line">		sb.append(&quot;[&quot;);</span><br><span class="line">		for(int i=0;i&lt;size;i++) &#123;</span><br><span class="line">			sb.append(elementData[i]+&quot;,&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		sb.setCharAt(sb.length()-1, &#x27;]&#x27;);</span><br><span class="line">		return sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		MslArrayList m = new MslArrayList(20);</span><br><span class="line">		for(int i=0;i&lt;40;i++) &#123;</span><br><span class="line">			m.add(&quot;senley&quot;+i);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(m);</span><br><span class="line">		m.set(&quot;test&quot;, 10);</span><br><span class="line">		System.out.println(m.get(10));</span><br><span class="line">		m.remove(3);</span><br><span class="line">		System.out.println(m);</span><br><span class="line">		m.remove(&quot;test&quot;);</span><br><span class="line">		System.out.println(m);</span><br><span class="line">		System.out.println(m.size);</span><br><span class="line">		System.out.println(m.isEmpty());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>结果如下：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[senley0,senley1,senley2,senley3,senley4,senley5,senley6,senley7,senley8,senley9,senley10,senley11,senley12,senley13,senley14,senley15,senley16,senley17,senley18,senley19,senley20,senley21,senley22,senley23,senley24,senley25,senley26,senley27,senley28,senley29,senley30,senley31,senley32,senley33,senley34,senley35,senley36,senley37,senley38,senley39]</span><br><span class="line">test</span><br><span class="line">[senley0,senley1,senley2,senley4,senley5,senley6,senley7,senley8,senley9,test,senley11,senley12,senley13,senley14,senley15,senley16,senley17,senley18,senley19,senley20,senley21,senley22,senley23,senley24,senley25,senley26,senley27,senley28,senley29,senley30,senley31,senley32,senley33,senley34,senley35,senley36,senley37,senley38,senley39]</span><br><span class="line">[senley0,senley1,senley2,senley4,senley5,senley6,senley7,senley8,senley9,senley11,senley12,senley13,senley14,senley15,senley16,senley17,senley18,senley19,senley20,senley21,senley22,senley23,senley24,senley25,senley26,senley27,senley28,senley29,senley30,senley31,senley32,senley33,senley34,senley35,senley36,senley37,senley38,senley39]</span><br><span class="line">38</span><br><span class="line">false</span><br></pre></td></tr></table></div></figure>

]]></content>
  </entry>
</search>
